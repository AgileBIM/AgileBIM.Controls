<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:AgileBIM.Controls">

    <Style TargetType="{x:Type local:AgileButton}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:AgileButton}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{Binding BorderRadius, RelativeSource={RelativeSource AncestorType=Button}}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{Binding BackgroundDisabled, RelativeSource={RelativeSource AncestorType=Button}}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding BorderBrushDisabled, RelativeSource={RelativeSource AncestorType=Button}}"/>
                            <Setter Property="TextBlock.Foreground" TargetName="contentPresenter" Value="{Binding ForegroundDisabled, RelativeSource={RelativeSource AncestorType=Button}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{Binding BackgroundHover, RelativeSource={RelativeSource AncestorType=Button}}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding BorderBrushHover, RelativeSource={RelativeSource AncestorType=Button}}"/>
                            <Setter Property="TextBlock.Foreground" TargetName="contentPresenter" Value="{Binding ForegroundHover, RelativeSource={RelativeSource AncestorType=Button}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{Binding BackgroundPressed, RelativeSource={RelativeSource AncestorType=Button}}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding BorderBrushPressed, RelativeSource={RelativeSource AncestorType=Button}}"/>
                            <Setter Property="TextBlock.Foreground" TargetName="contentPresenter" Value="{Binding ForegroundPressed, RelativeSource={RelativeSource AncestorType=Button}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:AgileComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:AgileComboBox}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Popup x:Name="PART_Popup"
                               AllowsTransparency="True"
                               Grid.ColumnSpan="2"
                               IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                               Margin="1"
                               PopupAnimation="{Binding PopupAnimation, RelativeSource={RelativeSource AncestorType=ComboBox}}"
                               Placement="{Binding PopupPlacement, RelativeSource={RelativeSource AncestorType=ComboBox}}">
                            <Border x:Name="DropDownBorder"
                                    BorderBrush="{Binding PopupBorderBrush, RelativeSource={RelativeSource AncestorType=ComboBox}}"
                                    BorderThickness="{Binding PopupBorderThickness, RelativeSource={RelativeSource AncestorType=ComboBox}}"
                                    CornerRadius="{Binding PopupBorderRadius, RelativeSource={RelativeSource AncestorType=ComboBox}}"
                                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
                                    Padding="{Binding PopupContentsMargin, RelativeSource={RelativeSource AncestorType=ComboBox}}"
                                    Background="{Binding PopupBackground, RelativeSource={RelativeSource AncestorType=ComboBox}}">
                                <Border.Resources>
                                    <Style x:Key="ScrollThumbs" TargetType="{x:Type Thumb}">
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type Thumb}">
                                                    <Grid x:Name="Grid"
                                                          HorizontalAlignment="Stretch"
                                                          Width="auto"
                                                          Margin="0">
                                                        <Rectangle HorizontalAlignment="Stretch"
                                                                   VerticalAlignment="Stretch"
                                                                   Width="Auto"
                                                                   Height="Auto"
                                                                   Fill="Transparent" />
                                                        <Border x:Name="Rectangle1"
                                                                CornerRadius="7"
                                                                HorizontalAlignment="Right"
                                                                Width="12"
                                                                VerticalAlignment="Stretch"
                                                                Height="Auto"
                                                                Background="{TemplateBinding Background}" />
                                                    </Grid>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="Tag" Value="Horizontal">
                                                            <Setter TargetName="Rectangle1" Property="Width" Value="auto" />
                                                            <Setter TargetName="Rectangle1" Property="Height" Value="12" />
                                                            <Setter TargetName="Rectangle1" Property="VerticalAlignment" Value="Top"/>
                                                            <Setter TargetName="Rectangle1" Property="HorizontalAlignment" Value="Stretch"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                    <Style TargetType="{x:Type ScrollViewer}">
                                        <Setter Property="CanContentScroll" Value="True"/>
                                    </Style>
                                    <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
                                        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
                                        <Setter Property="Foreground" Value="{Binding PopupScrollBarBrush, RelativeSource={RelativeSource AncestorType=ComboBox}}" />
                                        <Setter Property="Background" Value="Transparent" />
                                        <Setter Property="Width" Value="12" />
                                        <Setter Property="Opacity" Value="0.3"/>
                                        <Setter Property="Margin" Value="-2,0,0,0"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ScrollBar}">
                                                    <Grid x:Name="GridRoot" Width="12" Background="{TemplateBinding Background}" HorizontalAlignment="Stretch" >
                                                        <Grid.RowDefinitions>
                                                            <RowDefinition Height="0.00001*" />
                                                        </Grid.RowDefinitions>

                                                        <Track x:Name="PART_Track" Grid.Row="0" IsDirectionReversed="true" Focusable="false">
                                                            <Track.Thumb>
                                                                <Thumb x:Name="Thumb" Background="{TemplateBinding Foreground}" Style="{DynamicResource ScrollThumbs}" />
                                                            </Track.Thumb>
                                                            <Track.IncreaseRepeatButton>
                                                                <RepeatButton x:Name="PageUp" Command="ScrollBar.PageDownCommand" Opacity="0" Focusable="false" />
                                                            </Track.IncreaseRepeatButton>
                                                            <Track.DecreaseRepeatButton>
                                                                <RepeatButton x:Name="PageDown" Command="ScrollBar.PageUpCommand" Opacity="0" Focusable="false" />
                                                            </Track.DecreaseRepeatButton>
                                                        </Track>
                                                    </Grid>

                                                    <ControlTemplate.Triggers>
                                                        <Trigger SourceName="Thumb" Property="IsMouseOver" Value="true">
                                                            <Setter Value="{DynamicResource ButtonSelectBrush}" TargetName="Thumb" Property="Background" />
                                                        </Trigger>
                                                        <Trigger SourceName="Thumb" Property="IsDragging" Value="true">
                                                            <Setter Value="{DynamicResource DarkBrush}" TargetName="Thumb" Property="Background" />
                                                        </Trigger>

                                                        <Trigger Property="IsEnabled" Value="false">
                                                            <Setter TargetName="Thumb" Property="Visibility" Value="Collapsed" />
                                                        </Trigger>
                                                        <Trigger Property="Orientation" Value="Horizontal">
                                                            <Setter TargetName="GridRoot" Property="LayoutTransform">
                                                                <Setter.Value>
                                                                    <RotateTransform Angle="-90" />
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter Property="Margin" Value="0,-10,0,0"/>
                                                            <Setter TargetName="PART_Track" Property="LayoutTransform">
                                                                <Setter.Value>
                                                                    <RotateTransform Angle="-90" />
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter Property="Width" Value="Auto" />
                                                            <Setter Property="Height" Value="12" />
                                                            <Setter TargetName="Thumb" Property="Tag" Value="Horizontal" />
                                                            <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand" />
                                                            <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand" />
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Border.Resources>
                                <ScrollViewer x:Name="DropDownScrollViewer" CanContentScroll="True">
                                    <Grid x:Name="grid"
                                          RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas x:Name="canvas"
                                                HorizontalAlignment="Left"
                                                Height="0"
                                                VerticalAlignment="Top"
                                                Width="0">
                                            <Rectangle x:Name="OpaqueRect"
                                                       Fill="{Binding Background, ElementName=DropDownBorder}"
                                                       Height="{Binding ActualHeight, ElementName=DropDownBorder}"
                                                       Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                                        </Canvas>
                                        <ItemsPresenter x:Name="ItemsPresenter"
                                                        KeyboardNavigation.DirectionalNavigation="Contained"
                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Grid>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                        <ToggleButton x:Name="toggleButton"
                                      BorderBrush="{Binding BorderBrush, RelativeSource={RelativeSource AncestorType=ComboBox}}"
                                      BorderThickness="{Binding BorderThickness, RelativeSource={RelativeSource AncestorType=ComboBox}}"
                                      Background="{Binding Background, RelativeSource={RelativeSource AncestorType=ComboBox}}"
                                      Grid.ColumnSpan="2"
                                      Tag="{Binding}"
                                      IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                            <ToggleButton.Style>
                                <Style TargetType="{x:Type ToggleButton}">
                                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                                    <Setter Property="IsTabStop" Value="False"/>
                                    <Setter Property="Focusable" Value="False"/>
                                    <Setter Property="ClickMode" Value="Press"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                <Border x:Name="toggleRoot"
                                                        BorderBrush="{TemplateBinding BorderBrush}"
                                                        BorderThickness="{TemplateBinding BorderThickness}"
                                                        Background="{TemplateBinding Background}"
                                                        CornerRadius="{Binding BorderRadius, RelativeSource={RelativeSource AncestorType=ComboBox}}"
                                                        SnapsToDevicePixels="True">
                                                    <Border x:Name="splitBorder"
                                                            BorderBrush="Transparent"
                                                            BorderThickness="1"
                                                            HorizontalAlignment="Right"
                                                            Margin="0"
                                                            SnapsToDevicePixels="True"
                                                            Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                                        <Viewbox Margin="{Binding ArrowMargin, RelativeSource={RelativeSource AncestorType=ComboBox}}">
                                                            <Path x:Name="Arrow"
                                                                  Data="{TemplateBinding Tag}"
                                                                  Fill="{Binding ArrowBrush, RelativeSource={RelativeSource AncestorType=ComboBox}}"
                                                                  StrokeThickness="0"
                                                                  HorizontalAlignment="Center"
                                                                  Margin="0"
                                                                  VerticalAlignment="Center"/>
                                                        </Viewbox>
                                                    </Border>
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <DataTrigger Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true">
                                                        <Setter Property="Background" TargetName="toggleRoot" Value="{Binding BackgroundPressed, RelativeSource={RelativeSource AncestorType=ComboBox}}"/>
                                                        <Setter Property="BorderBrush" TargetName="toggleRoot" Value="{Binding BorderBrushPressed, RelativeSource={RelativeSource AncestorType=ComboBox}}"/>
                                                        <Setter Property="Fill" TargetName="Arrow" Value="{Binding ArrowBrushPressed, RelativeSource={RelativeSource AncestorType=ComboBox}}"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true">
                                                        <Setter Property="Background" TargetName="toggleRoot" Value="{Binding BackgroundHover, RelativeSource={RelativeSource AncestorType=ComboBox}}"/>
                                                        <Setter Property="BorderBrush" TargetName="toggleRoot" Value="{Binding BorderBrushHover, RelativeSource={RelativeSource AncestorType=ComboBox}}"/>
                                                        <Setter Property="Fill" TargetName="Arrow" Value="{Binding ArrowBrushHover, RelativeSource={RelativeSource AncestorType=ComboBox}}"/>
                                                    </DataTrigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ToggleButton.Style>
                        </ToggleButton>
                        <ContentPresenter x:Name="contentPresenter"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                          Content="{TemplateBinding SelectionBoxItem}"
                                          ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          IsHitTestVisible="False"
                                          Margin="{Binding Padding, RelativeSource={RelativeSource AncestorType=ComboBox}}"
                                          TextBlock.Foreground="{TemplateBinding Foreground}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsOpen, ElementName=PART_Popup}" Value="True">
                            <Setter Property="Tag" TargetName="toggleButton" Value="{Binding ArrowGeometryOpened, RelativeSource={RelativeSource AncestorType=ComboBox}}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsOpen, ElementName=PART_Popup}" Value="False">
                            <Setter Property="Tag" TargetName="toggleButton" Value="{Binding ArrowGeometryClosed, RelativeSource={RelativeSource AncestorType=ComboBox}}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="TextBlock.Foreground" TargetName="contentPresenter" Value="{Binding ForegroundHover, RelativeSource={RelativeSource AncestorType=ComboBox}}"/>
                        </DataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.6"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="False">
                            <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </Trigger>
                        <Trigger Property="CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                            <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                            <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:AgileTabControl}" BasedOn="{StaticResource {x:Type TabControl}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:AgileTabControl}">
                    <Grid x:Name="templateRoot"
                          ClipToBounds="True"
                          SnapsToDevicePixels="True"
                          Background="Transparent"
                          KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0"/>
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                            <RowDefinition x:Name="RowDefinition1" Height="*"/>
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="HeaderPanel"
                                  Panel.ZIndex="1"
                                  Margin="{Binding HeaderPanelMargin, RelativeSource={RelativeSource AncestorType=TabControl}}"
                                  Background="{Binding Background, RelativeSource={RelativeSource AncestorType=TabControl}}"
                                  IsItemsHost="True"
                                  KeyboardNavigation.TabIndex="2"/>

                        <!--this is blank space that doesn't have tabs-->
                        <Border x:Name="blankregion" Panel.ZIndex="1" Margin="0" Padding="0"
                                Background="{Binding Background, RelativeSource={RelativeSource AncestorType=TabControl}}">
                            <ContentPresenter x:Name="blankpresenter"
                                              KeyboardNavigation.TabIndex="1"
                                              Content="{Binding TabBlankSpaceContent, RelativeSource={RelativeSource AncestorType=TabControl}}"
                                              ContentSource="TabBlankSpaceContent"
                                              SnapsToDevicePixels="True"/>
                        </Border>

                        <Grid x:Name="ContentPanel">
                            <Border
                                BorderBrush="{Binding BorderBrush, RelativeSource={RelativeSource AncestorType=TabControl}}"
                                BorderThickness="{Binding BorderThickness, RelativeSource={RelativeSource AncestorType=TabControl}}"
                                Background="{Binding SelectedItem.Background, RelativeSource={RelativeSource AncestorType=TabControl}}"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                KeyboardNavigation.TabNavigation="Local"
                                CornerRadius="{Binding BorderRadius, RelativeSource={RelativeSource AncestorType=TabControl}}"
                                KeyboardNavigation.TabIndex="3">
                                <ContentControl x:Name="PART_SelectedContentHost"
                                                ContentTemplate="{Binding SelectedContentTemplate, RelativeSource={RelativeSource AncestorType=TabControl}}"
                                                Content="{Binding SelectedContent, RelativeSource={RelativeSource AncestorType=TabControl}}"
                                                ContentStringFormat="{Binding SelectedContentStringFormat, RelativeSource={RelativeSource AncestorType=TabControl}}"
                                                Margin="{Binding Padding, RelativeSource={RelativeSource AncestorType=TabControl}}"
                                                SnapsToDevicePixels="{Binding SnapsToDevicePixels, RelativeSource={RelativeSource AncestorType=TabControl}}"/>
                            </Border>

                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Top">
                            <Setter Property="Grid.Row" TargetName="blankregion" Value="0"/>
                            <Setter Property="Grid.RowSpan" TargetName="blankregion" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="blankregion" Value="1"/>
                            <Setter Property="Grid.ColumnSpan" TargetName="blankregion" Value="1"/>

                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.RowSpan" TargetName="HeaderPanel" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.ColumnSpan" TargetName="HeaderPanel" Value="1"/>

                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="1"/>
                            <Setter Property="Grid.RowSpan" TargetName="ContentPanel" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Grid.ColumnSpan" TargetName="ContentPanel" Value="2"/>

                            <Setter Property="Height" TargetName="RowDefinition0" Value="Auto"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="*"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                        </Trigger>

                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="blankregion" Value="1"/>
                            <Setter Property="Grid.RowSpan" TargetName="blankregion" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="blankregion" Value="1"/>
                            <Setter Property="Grid.ColumnSpan" TargetName="blankregion" Value="1"/>

                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1"/>
                            <Setter Property="Grid.RowSpan" TargetName="HeaderPanel" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.ColumnSpan" TargetName="HeaderPanel" Value="1"/>

                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Grid.RowSpan" TargetName="ContentPanel" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Grid.ColumnSpan" TargetName="ContentPanel" Value="2"/>

                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                        </Trigger>

                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Grid.Row" TargetName="blankregion" Value="1"/>
                            <Setter Property="Grid.RowSpan" TargetName="blankregion" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="blankregion" Value="0"/>
                            <Setter Property="Grid.ColumnSpan" TargetName="blankregion" Value="1"/>

                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.RowSpan" TargetName="HeaderPanel" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.ColumnSpan" TargetName="HeaderPanel" Value="1"/>

                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Grid.RowSpan" TargetName="ContentPanel" Value="2"/>
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="1"/>
                            <Setter Property="Grid.ColumnSpan" TargetName="ContentPanel" Value="1"/>

                            <Setter Property="Height" TargetName="RowDefinition0" Value="Auto"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="*"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                        </Trigger>

                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="blankregion" Value="1"/>
                            <Setter Property="Grid.RowSpan" TargetName="blankregion" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="blankregion" Value="1"/>
                            <Setter Property="Grid.ColumnSpan" TargetName="blankregion" Value="1"/>

                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.RowSpan" TargetName="HeaderPanel" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1"/>
                            <Setter Property="Grid.ColumnSpan" TargetName="HeaderPanel" Value="1"/>

                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Grid.RowSpan" TargetName="ContentPanel" Value="2"/>
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Grid.ColumnSpan" TargetName="ContentPanel" Value="1"/>

                            <Setter Property="Height" TargetName="RowDefinition0" Value="Auto"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="*"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:AgileTabItem}" BasedOn="{StaticResource {x:Type TabItem}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:AgileTabItem}">
                    <Grid Name="templateRoot" Background="Transparent">
                        <Grid.Style>
                            <Style TargetType="{x:Type Grid}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding TabIsRotated, RelativeSource={RelativeSource AncestorType=TabItem}}" Value="true">
                                        <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
                                        <Setter Property="LayoutTransform">
                                            <Setter.Value>
                                                <TransformGroup>
                                                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                                                    <SkewTransform AngleX="0" AngleY="0"/>
                                                    <RotateTransform Angle="-90"/>
                                                    <TranslateTransform X="0" Y="0"/>
                                                </TransformGroup>
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="RenderTransform">
                                            <Setter.Value>
                                                <TransformGroup>
                                                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                                                    <SkewTransform AngleX="0" AngleY="0"/>
                                                    <RotateTransform Angle="0"/>
                                                    <TranslateTransform X="0" Y="0"/>
                                                </TransformGroup>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Style>
                        <Border Name="mainBorder"
                                BorderBrush="{Binding TabBorderBrush, RelativeSource={RelativeSource AncestorType=TabItem}}"
                                BorderThickness="{Binding TabBorderThickness, RelativeSource={RelativeSource AncestorType=TabItem}}"
                                CornerRadius="{Binding TabBorderRadius, RelativeSource={RelativeSource AncestorType=TabItem}}"
                                Background="{Binding TabBackground, RelativeSource={RelativeSource AncestorType=TabItem}}"
                                Padding="0"
                                Margin="0">
                        </Border>
                        <ContentPresenter Name="contentPresenter"
                                          ContentTemplate="{Binding HeaderTemplate, RelativeSource={RelativeSource AncestorType=TabItem}}"
                                          Content="{Binding Header, RelativeSource={RelativeSource AncestorType=TabItem}}"
                                          ContentStringFormat="{Binding HeaderStringFormat, RelativeSource={RelativeSource AncestorType=TabItem}}"
                                          ContentSource="Header"
                                          Focusable="False"
                                          HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType=TabItem}}"
                                          Margin="{Binding Padding, RelativeSource={RelativeSource AncestorType=TabItem}}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{Binding SnapsToDevicePixels, RelativeSource={RelativeSource AncestorType=TabItem}}"
                                          TextBlock.FontWeight="{Binding TabFontWeight, RelativeSource={RelativeSource AncestorType=TabItem}}"
                                          TextBlock.FontSize="{Binding TabFontSize, RelativeSource={RelativeSource AncestorType=TabItem}}"
                                          VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType=TabItem}}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{Binding TabBackgroundHover, RelativeSource={RelativeSource AncestorType=TabItem}}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{Binding TabBorderBrushHover, RelativeSource={RelativeSource AncestorType=TabItem}}"/>
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{Binding TabBackground, RelativeSource={RelativeSource AncestorType=TabItem}}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{Binding TabBorderBrush, RelativeSource={RelativeSource AncestorType=TabItem}}"/>
                        </MultiDataTrigger>


                        <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter Property="Margin" TargetName="templateRoot" Value="{Binding Margin, RelativeSource={RelativeSource AncestorType=TabItem}}"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="Panel.ZIndex" Value="100"/>
                            <Setter Property="Margin" TargetName="templateRoot" Value="{Binding TabSelectedMargin, RelativeSource={RelativeSource AncestorType=TabItem}}"/>
                            <Setter Property="Background" TargetName="mainBorder" Value="{Binding TabBackgroundSelected, RelativeSource={RelativeSource AncestorType=TabItem}}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{Binding TabBorderBrushSelected, RelativeSource={RelativeSource AncestorType=TabItem}}"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter Property="Opacity" TargetName="templateRoot" Value="0.5"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:AgileToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:AgileToggleButton}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{Binding BorderRadius, RelativeSource={RelativeSource AncestorType=ToggleButton}}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <ContentPresenter x:Name="contentPresenter"
                                              RecognizesAccessKey="True"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              Content="{TemplateBinding Content}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              Focusable="False"
                                              HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType=ToggleButton}}"
                                              Margin="{TemplateBinding Padding}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType=ToggleButton}}"/>
                            <Viewbox Margin="1" Visibility="Collapsed" x:Name="CheckMark">
                                <Path Width="7"
                                      Height="7"
                                      SnapsToDevicePixels="False"
                                      StrokeEndLineCap="Round"
                                      StrokeStartLineCap="Round"
                                      Stroke="{Binding Foreground, RelativeSource={RelativeSource AncestorType=ToggleButton}}"
                                      StrokeThickness="1">
                                    <Path.Style>
                                        <Style TargetType="{x:Type Path}">

                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource AncestorType=ToggleButton}}" Value="True">
                                                    <Setter Property="Data" Value="M 1 4 L 3 6.5 M 3 6.5 L 6 0.5"/>

                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource AncestorType=ToggleButton}}" Value="False">
                                                    <Setter Property="Data" Value="M 0.5 0.5 L 6.5 6.5 M 0.5 6.5 L 6.5 0.5"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Path.Style>

                                </Path>
                            </Viewbox>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding CheckVisibility, RelativeSource={RelativeSource Self}}" Value="Visible">
                            <Setter Property="Visibility" TargetName="CheckMark" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="contentPresenter" Value="Collapsed"/>
                        </DataTrigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{Binding BackgroundChecked, RelativeSource={RelativeSource AncestorType=ToggleButton}}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding BorderBrushChecked, RelativeSource={RelativeSource AncestorType=ToggleButton}}"/>
                            <Setter Property="TextBlock.Foreground" TargetName="contentPresenter" Value="{Binding ForegroundChecked, RelativeSource={RelativeSource AncestorType=ToggleButton}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{Binding BackgroundDisabled, RelativeSource={RelativeSource AncestorType=ToggleButton}}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding BorderBrushDisabled, RelativeSource={RelativeSource AncestorType=ToggleButton}}"/>
                            <Setter Property="TextBlock.Foreground" TargetName="contentPresenter" Value="{Binding ForegroundDisabled, RelativeSource={RelativeSource AncestorType=ToggleButton}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{Binding BackgroundHover, RelativeSource={RelativeSource AncestorType=ToggleButton}}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding BorderBrushHover, RelativeSource={RelativeSource AncestorType=ToggleButton}}"/>
                            <Setter Property="TextBlock.Foreground" TargetName="contentPresenter" Value="{Binding ForegroundHover, RelativeSource={RelativeSource AncestorType=ToggleButton}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{Binding BackgroundPressed, RelativeSource={RelativeSource AncestorType=ToggleButton}}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding BorderBrushPressed, RelativeSource={RelativeSource AncestorType=ToggleButton}}"/>
                            <Setter Property="TextBlock.Foreground" TargetName="contentPresenter" Value="{Binding ForegroundPressed, RelativeSource={RelativeSource AncestorType=ToggleButton}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:AgileTextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:AgileTextBox}">
                    <Grid x:Name="gridRoot">
                        <Border x:Name="border"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                CornerRadius="{Binding BorderRadius, RelativeSource={RelativeSource AncestorType=TextBox}}"
                                Padding="1"
                                SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden">
                                <ScrollViewer.Style>
                                    <Style TargetType="{x:Type ScrollViewer}">
                                        <Style.Triggers>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </ScrollViewer.Style>
                            </ScrollViewer>
                        </Border>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" Padding="1"
                                BorderBrush="Transparent" SnapsToDevicePixels="True" IsHitTestVisible="False">
                            <Grid>
                                <TextBlock Padding="0" Margin="0" IsHitTestVisible="False"
                                           IsEnabled="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType=TextBox}}">
                                    <TextBlock.Style>
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType=TextBox}}" Value="False">
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                    <Setter Property="HorizontalAlignment" Value="Center"/>
                                                    <Setter Property="VerticalAlignment" Value="Center"/>
                                                    <Setter Property="Text" Value="Disabled"/>
                                                    <Setter Property="FontFamily" Value="Arial"/>
                                                    <Setter Property="Foreground" Value="{Binding WatermarkForeground, RelativeSource={RelativeSource AncestorType=TextBox}}"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                                <TextBlock Padding="0"
                                           IsEnabled="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType=TextBox}}"
                                           IsHitTestVisible="False">
                                    <TextBlock.Style>
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Setter Property="Text" Value="{Binding Watermark, RelativeSource={RelativeSource AncestorType=TextBox}}"/>
                                            <Setter Property="HorizontalAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType=TextBox}}"/>
                                            <Setter Property="VerticalAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType=TextBox}}"/>
                                            <Setter Property="Margin" Value="{Binding Padding, RelativeSource={RelativeSource AncestorType=TextBox}}"/>
                                            <Setter Property="Visibility" Value="Hidden"/>
                                            <Setter Property="FontFamily" Value="{Binding WatermarkFontFamily, RelativeSource={RelativeSource AncestorType=TextBox}}"/>
                                            <Setter Property="Foreground" Value="{Binding WatermarkForeground, RelativeSource={RelativeSource AncestorType=TextBox}}"/>
                                            <Style.Triggers>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding Text, RelativeSource={RelativeSource AncestorType=TextBox}}" Value=""/>
                                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType=TextBox}}" Value="True"/>
                                                        <Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource AncestorType=TextBox}}" Value="False"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </Grid>
                        </Border>
                        <Popup x:Name="errMessage"
                               Placement="Bottom"
                               AllowsTransparency="True"
                               Width="{Binding ActualWidth, ElementName=border}">
                            <Grid>
                                <Border BorderBrush="{Binding ValidationPopupBorderBrush, RelativeSource={RelativeSource AncestorType=TextBox}}"
                                        BorderThickness="{Binding ValidationPopupBorderThickness, RelativeSource={RelativeSource AncestorType=TextBox}}"
                                        Margin="{Binding ValidationPopupMargin, RelativeSource={RelativeSource AncestorType=TextBox}}"
                                        CornerRadius="{Binding ValidationPopupBorderRadius, RelativeSource={RelativeSource AncestorType=TextBox}}"
                                        Background="{Binding ValidationPopupBackground, RelativeSource={RelativeSource AncestorType=TextBox}}">
                                    <TextBlock Text="{Binding ValidationMessage, RelativeSource={RelativeSource AncestorType=TextBox}}"
                                               Margin="{Binding ValidationMessageMargin, RelativeSource={RelativeSource AncestorType=TextBox}}"
                                               TextWrapping="Wrap"/>
                                </Border>
                            </Grid>
                            <Popup.Style>
                                <Style TargetType="{x:Type Popup}">
                                    <Setter Property="IsOpen" Value="False"/>
                                    <Style.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource AncestorType=TextBox}}" Value="true"/>
                                                <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource AncestorType=TextBox}}" Value="false"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="IsOpen" Value="{Binding ValidationPopupIsOpen, RelativeSource={RelativeSource AncestorType=TextBox}}"/>
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Popup.Style>
                        </Popup>
                    </Grid>


                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="true">
                            <Setter Property="Opacity" Value="0.7"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding BorderBrushFocused, RelativeSource={RelativeSource AncestorType=TextBox}}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{Binding BorderBrushFocused, RelativeSource={RelativeSource AncestorType=TextBox}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    

</ResourceDictionary>